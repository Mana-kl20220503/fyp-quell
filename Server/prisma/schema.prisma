// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String   
  profile Profile[]
  post Post[]
  puffLog PuffLog[]
  purchaseLog PurchaseLog[]
}

model Profile{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reasonToQuit String
  imgUrl String
  userName String
  user User @relation(fields: [userId], references:[id])
  userId Int @unique
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  content String
  mood String?
  likes Int @default(0)
}

model Vape{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price Decimal
  brand String
  productType String
  puffLog PuffLog[]
}

model PuffLog{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  puffTaken Int
  nicotine Int
  productType String
  vape Vape @relation(fields:[vapeId], references:[id])
  vapeId Int
  user User @relation(fields:[userId], references:[id])
  userId Int
}

model PurchaseLog{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  totalCost Decimal
  quantity Int @default(0)
  user User @relation(fields:[userId], references:[id])
  userId Int
}

// Question mark (?) means nullable
